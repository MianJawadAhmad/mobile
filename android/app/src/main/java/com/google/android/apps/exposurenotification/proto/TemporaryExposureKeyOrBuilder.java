// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_file.proto

package com.google.android.apps.exposurenotification.proto;

public interface TemporaryExposureKeyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:com.google.android.apps.exposurenotification.debug.TemporaryExposureKey)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Key of infected user
   * </pre>
   *
   * <code>optional bytes key_data = 1;</code>
   * @return Whether the keyData field is set.
   */
  boolean hasKeyData();
  /**
   * <pre>
   * Key of infected user
   * </pre>
   *
   * <code>optional bytes key_data = 1;</code>
   * @return The keyData.
   */
  com.google.protobuf.ByteString getKeyData();

  /**
   * <pre>
   * Varying risks associated with exposure depending on type of verification
   * </pre>
   *
   * <code>optional int32 transmission_risk_level = 2;</code>
   * @return Whether the transmissionRiskLevel field is set.
   */
  boolean hasTransmissionRiskLevel();
  /**
   * <pre>
   * Varying risks associated with exposure depending on type of verification
   * </pre>
   *
   * <code>optional int32 transmission_risk_level = 2;</code>
   * @return The transmissionRiskLevel.
   */
  int getTransmissionRiskLevel();

  /**
   * <pre>
   * The interval number since epoch for which a key starts
   * </pre>
   *
   * <code>optional int32 rolling_start_interval_number = 3;</code>
   * @return Whether the rollingStartIntervalNumber field is set.
   */
  boolean hasRollingStartIntervalNumber();
  /**
   * <pre>
   * The interval number since epoch for which a key starts
   * </pre>
   *
   * <code>optional int32 rolling_start_interval_number = 3;</code>
   * @return The rollingStartIntervalNumber.
   */
  int getRollingStartIntervalNumber();

  /**
   * <pre>
   * Increments of 10 minutes describing how long a key is valid
   * </pre>
   *
   * <code>optional int32 rolling_period = 4 [default = 144];</code>
   * @return Whether the rollingPeriod field is set.
   */
  boolean hasRollingPeriod();
  /**
   * <pre>
   * Increments of 10 minutes describing how long a key is valid
   * </pre>
   *
   * <code>optional int32 rolling_period = 4 [default = 144];</code>
   * @return The rollingPeriod.
   */
  int getRollingPeriod();
}
